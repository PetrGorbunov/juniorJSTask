<apex:page showHeader="false" sidebar="false" standardStylesheets="false" controller="GetRecordsWithJsUCController">
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js" />
    <apex:includeScript value="{!$Resource.undercore}"/>

    <script src="{!URLFOR($Resource.jqueryui, 'jquery-ui-1.12.1.custom/jquery-ui.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.jqueryui, 'jquery-ui-1.12.1.custom/jquery-ui.css')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.styles, 'loader_grey.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.styles, 'picklistEditing.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.styles, 'table.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.styles, 'main.css')}" />

    <style type="text/css">
      .cellEdited {
          color: red;
      }
    </style>

    <div class="b-popup" id="popup1" >
        <div id="picklist" class="b-popup-content">
          
        </div>
    </div>
    <div class="b-popup" id="popup2" >
      <div id="timepicker" class="b-popup-content">
        <div>Set time:</div>
        <div id="hourPicker">
          H:
          <button id="minusHour" onmouseup="isPressed=false;changeTimeFast(-3600);" onmousedown="isPressed=true;changeTimeFast(-3600);">-</button>
          <input type="text" value="0" id="inputHour" disabled="disabled" size="2" /> 
          <button id="plusHour" onmouseup="isPressed=false;changeTimeFast(3600);" onmousedown="isPressed=true;changeTimeFast(3600);">+</button>
        </div>
        <div id="minutPicker">
          M:
          <button id="minusMinut" onmouseup="isPressed=false;changeTimeFast(-60);" onmousedown="isPressed=true;changeTimeFast(-60);">-</button>
          <input type="text" value="0" id="inputMinut" disabled="disabled" size="2" />
          <button id="plusMinut" onmouseup="isPressed=false;changeTimeFast(60);" onmousedown="isPressed=true;changeTimeFast(60);">+</button>
        </div>
        <div id="secPicker">
          S:
          <!-- onclick="changeTime(-1)" -->
          <button id="minusSec"  onmouseup="isPressed=false;changeTimeFast(-1);" onmousedown="isPressed=true;changeTimeFast(-1);" >-</button>
          <input type="text" value="0" id="inputSec" disabled="disabled" size="2" />
          <button id="plusSec" onmouseup="isPressed=false;changeTimeFast(1);" onmousedown="isPressed=true;changeTimeFast(1);">+</button>
        </div>
        <div id="btnTimePicker">
            <button id="btnTimePicker" onclick="setTime();">Set</button>
        </div>
      </div>
    </div>

  <div class="b-container">
    <div class="parent">

      <!-- <input class="timepicker" type="text" onclick="TimePickerShow();" id="timepicker" />  -->
      <div id="Errors" class="block"></div>      
      
      <div id="divTableNames" class="block" ></div>
      <div id="divTableFields" class="block" ></div>
      
      <div id="spiner" class="loader" ></div>
    </div>

    <div id="divResultTable">
        <table id="resultTableTag" class="table-fill">
            <thead id="tableHead"></thead>
            <tbody id="tableBody" class="table-hover"></tbody>            
        </table>    

        <div id="pagination" class="block">
            <select id="rowsOnPage" onchange="changePagination(this)">
                <option value="5" >5</option>
                <option value="10" >10</option>
                <option value="18" >18</option>
                <option value="25" >25</option>
                <option value="50" >50</option>
            </select>

            <button id="firstPage">&lt;&lt;</button>
            <button id="prevPage">&lt;</button>
            <input disabled="disabled" id="currentPage" type="text" value="1" size="3" />
            <span id="pagesCount"></span>
            <button id="nextPage">&gt;</button>
            <button id="lastPage">&gt;&gt;</button>
        </div>
    </div>

    <div id="buttonEditBlock" class="block">
        <button onclick="editRows()" id="buttonEdit" >Change</button>
    </div>
  </div>

    <script type="text/javascript">
        $("#Errors").text("");
        $("#spiner").show();
        $("#divResultTable").hide();
        $("#buttonEditBlock").hide();
        PopUpHide();
        TimePickerHide();

        Visualforce.remoting.Manager.invokeAction(
            "{!$RemoteAction.GetRecordsWithJsUCController.getTableNames}",            
            function(result, event) {
                $("#spiner").hide();
                if (event.status) {
                    tables = [];
                    for (var iter = 0; iter < result.length; iter++) {  
                        tables.push({name: result[iter]}); 
                    }     
                    tableNamesView = $("#tmpTableNames").html();
                    $("#divTableNames").append(_.template(tableNamesView, {tables: tables}));               
                } 
                else if (event.type === 'exception') {
                    $("#Errors").text(event.message + ". Look:" + event.where);
                } 
                else {
                    $("#Errors").text(event.message);
                }
            },
            {escape: false}
        );

/***********************************************REMOTE ACTION FUNCTIONS***********************************************/
        function getFields(tableName) { 
            $("#Errors").text("");
            $("#divTableFields").empty();    
            $("#spiner").show();
            $("#divResultTable").hide();
            $("#buttonEditBlock").hide();            

            Visualforce.remoting.Manager.invokeAction(
                "{!$RemoteAction.GetRecordsWithJsUCController.getFields}",
                tableName.value,
                function(result, event) {
                    if (event.status) {      
                        $("#spiner").hide();                       
                        fields = [];
                        for (var iter = 0; iter < result.length; iter++) {  
                            fields.push({name: result[iter]}); 
                        }
                        if (fields.length > 0) {                        
                            tableFieldsView = $("#tmpFieldNames").html();
                            $("#divTableFields").append(_.template(tableFieldsView, {fields: fields}));
                        }
                    } 
                    else if (event.type === "exception") {
                        $("#Errors").text(event.message + ". Look:" + event.where);
                    } 
                    else {
                        $("#Errors").text(event.message);
                    }
                },
                {escape: false}
            );                        
        }

        function runQuery(field, direction) {
            $("#Errors").text("");
            $("#spiner").show();
            $("#divResultTable").hide();
            $("#tableHead").empty();
            $("#tableBody").empty();
            $("#buttonEditBlock").hide();

            tableName = $("#selectTableNames").val();
            fieldsName = $("#selectFieldNames").val(); 
            if (_.indexOf(fieldsName, "Id") == -1) { 
                fieldsName.unshift("Id");
            }

            Visualforce.remoting.Manager.invokeAction(
                "{!$RemoteAction.GetRecordsWithJsUCController.runQuery}",
                tableName,
                fieldsName,
                field,
                direction,
                function(result, event) {
                    if (event.status) {   
                        $("#spiner").hide();
                        $("#currentPage").val(1);  
                        $("#divResultTable").show();

                        if (result.length == 0) {
                            $('#divResultTable').hide();
                            return;
                        }
                        //for head
                        heads = [];
                        for (var iter = 0; iter < fieldsName.length; iter++) {
                            if (fieldsName[iter] == field) {
                                heads.push({
                                    "name" : fieldsName[iter],
                                    "isSort" : true,
                                    "direction" : direction,
                                    "isEdit" : result[0].fieldsList[iter].isEdit
                                });
                            }
                            else {
                                heads.push({
                                    "name" : fieldsName[iter],
                                    "isSort" : false,
                                    "direction" : direction,
                                    "isEdit" : result[0].fieldsList[iter].isEdit
                                });
                            }
                        }

                        resultTableHeadView = $("#tmpResultTableHead").html();
                        $('#tableHead').append(_.template(resultTableHeadView, {heads: heads}));

                        records = [];
                        for (var iter = 0; iter < result.length; iter++) {
                            records.push({
                                object: result[iter]
                            });
                        }
                        paginationControl(records);
                    }
                    else if (event.type === 'exception') {
                        $("#Errors").text(event.message + ". Look:" + event.where);
                    } 
                    else {
                        $("#Errors").text(event.message);
                    }
                },
                {escape: false}
            );
        }

        function editRows() {
            $("#Errors").text("");
            $("#spiner").show();
            $("#buttonEditBlock").hide();
            $(".cellEdited").removeClass("cellEdited");
            
            var tableForChange = [];
            $("#resultTableTag thead>tr,#resultTableTag tr[type='Edited']").each(function() { 
                var arrayCurrentRow = [];
                var elementCurrentRow = $(this).find("td, th");
                if (elementCurrentRow.length > 0) {
                    elementCurrentRow.each(function() {
                        if( $(this).attr("edit") == "true" || $(this).index() == 0) {
                            cellValue = $(this).clone().children().remove().end().text().replace(/\r|\n/g, "").trim(); 
                            arrayCurrentRow.push(cellValue);                            
                        }
                    });
                    tableForChange.push(arrayCurrentRow);
                }
            });

            var myJsonString = JSON.stringify(tableForChange);
            var tableName = $("#selectTableNames").val();

            Visualforce.remoting.Manager.invokeAction(
                "{!$RemoteAction.GetRecordsWithJsUCController.saveListObjects}",
                myJsonString,
                tableName,
                function(result, event) {
                    if (event.status) {
                        $("#spiner").hide();
                        $("#Errors").text("Your change saved!!!");
                    }       
                    else if (event.type === 'exception') {
                        $("#spiner").hide();
                        runQuery("Id", true);
                        $("#Errors").text("Your change did not save! Error:" + event.message + ". Look:" + event.where);
                    } 
                    else {
                        $("#spiner").hide();
                        runQuery("Id", true);       
                        $("#Errors").text("Your change did not save! Error:" + event.message);                                         
                    }
                },
                {escape: false}
            );
        }

//******************************SUPPORT FUNCTIONS**********************************************************************************************

          function cancelSelect() {
            $("#picklist").empty();
            PopUpHide();
          }

          function selectedPickList() {
            var newValue = $("#picklistValues option:selected").text();
            var picklistValue;
            if ($("#picklistValues").attr("multiple")) {
              picklistValue = $("#picklistValues").val().join(';');
            }
            else {
              picklistValue = $("#picklistValues").val();
            }            

            $(currentCell).text(picklistValue);           
            $("#picklist").empty();
            PopUpHide();
            if (picklistValue == oldValue) {
              return;
            }
            $('#buttonEditBlock').show();
            $(currentCell).parents("tr").attr("type", "Edited");
            $(currentCell).addClass("cellEdited");
          }

          function PopUpShow(){
              $("#popup1").show();
          }

          function PopUpHide(){
              $("#popup1").hide();
          }

          function TimePickerShow(){
              $("#popup2").show();
          }

          function TimePickerHide(){
              $("#popup2").hide();
          }

          function setTime() {   
            var hours = $("#inputHour").val();
            hours = (hours < 10) ? "0" + hours : hours;

            var minuts = $("#inputMinut").val();
            minuts = (minuts < 10) ? "0" + minuts : minuts;

            var seconds = $("#inputSec").val();
            seconds = (seconds < 10) ? "0" + seconds : seconds;

            timepickerValue = $(currentCell).text() +  " " + hours + ":" + minuts + ":" + seconds;
            $(currentCell).text(timepickerValue);

            TimePickerHide();
          }

          function changeTime(value) {
            var allSec = parseInt(getAllSeconds());
            allSec += parseInt(value);

            if (allSec < 0) {
                allSec = allSec + 24 * 60 * 60;
            } 
            else if (allSec >= 86400) {
                allSec = allSec - 24 * 60 * 60;
            }

            var seconds = allSec % 60;
            var hours = Math.floor(allSec / 3600);
            var minuts = Math.floor((allSec - seconds - hours * 3600) / 60);

            $("#inputSec").val(seconds);
            $("#inputHour").val(hours);
            $("#inputMinut").val(minuts);
          }

          var isPressed = false;
          var count = 0;
          function changeTimeFast(value) {
            if (count < 3) {
                speed = 400;
            } 
            else if (count < 9) {
                speed = 250;
            }
            else if (count < 15) {
                speed = 100;
            }
            else if (count < 22) {
                speed = 50;
            }

            if (isPressed) {
                count++;
                changeTime(value);
                setTimeout('changeTimeFast(' + value + ')', speed);
            }
            else {
                count = 0;
            }
          }

          function getAllSeconds() {
            var hours = parseInt($("#inputHour").val());
            var minuts = parseInt($("#inputMinut").val());
            var seconds = parseInt($("#inputSec").val());
            var allSec = seconds + minuts * 60 + hours * 60 * 60;
            return allSec;
          }

        function getDataView(dateFromBase, isDateOnly) {
            var myDate = new Date(dateFromBase);
            var day = myDate.getDate();
            day = (day < 10) ? "0" + day : day; 

            var month = myDate.getMonth() + 1;
            month = (month < 10) ? "0" + month : month;

            var hour = myDate.getHours();
            hour = (hour < 10) ? "0" + hour : hour;

            var minut = myDate.getMinutes();
            minut = (minut < 10) ? "0" + minut : minut;

            var second = myDate.getSeconds();
            second = (second < 10) ? "0" + second : second;

            var year = myDate.getFullYear();

            if (isDateOnly) {
                dateStr = year + '-' + month + '-' + day;
            }
            else {
                dateStr = year + '-' + month + '-' + day + ' ' + hour + ':' + minut + ':' + second;
            }

            return dateStr;
        }

        function getReference(ref) {
            return "{!baseURL}" + "/" + ref;
        }

        function openDatepicker(action) {
            var oldValue = $(action).val();

            $(action).datepicker({
                dateFormat: "yy-mm-dd",
                onSelect: function(dateText, inst) {
                    $("#buttonEditBlock").show();
                    var val = $(this).val();

                    $(this).parents("tr").attr("type", "Edited");
                    $(this).parents("td").addClass("cellEdited");
                    $(this).parent().empty().html(val);

                    if ($(currentCell).attr("type") == "DATETIME") {
                      TimePickerShow();                 
                    }
                },
                onClose: function(selectedDate) {
                    $(this).parent().empty().html(oldValue);
                }
            }).focus();
        }

        function changePagination(rowsCount) {
            $("#currentPage").val("1");
            paginationControl(records);
        }

        function paginationControl(records) {
            $("#buttonEditBlock").hide();
            $("#tableBody").empty();

            rowsPageCount = $("#rowsOnPage").val();
            recordsCount = records.length;
            pagesCount = Math.ceil(records.length/rowsPageCount);
            $("#pagesCount").empty().text(pagesCount);
            currentPage = $("#currentPage").val();

            startRecord = (currentPage - 1) * rowsPageCount;
            finishRecord = currentPage * rowsPageCount - 1;
            if (finishRecord >= recordsCount) {
                finishRecord = recordsCount - 1;
            } 

            recordsView = [];
            for (var i = startRecord; i <= finishRecord; i++) {
                recordsView.push(records[i]);
            }

            resultTableBodyView = $("#tmpResultTableBody").html();
            $("#tableBody").append(_.template(resultTableBodyView, {recordsView: recordsView}));

            if (currentPage == 1 && pagesCount == 1) { 
                $("#firstPage").attr("disabled",true);
                $("#prevPage").attr("disabled",true);                
                $("#nextPage").attr("disabled",true);  
                $("#lastPage").attr("disabled",true);  
            } 
            else if (currentPage == 1) {
                $("#firstPage").attr("disabled",true);
                $("#prevPage").attr("disabled",true);                
                $("#nextPage").removeAttr("disabled");
                $("#lastPage").removeAttr("disabled");
            }
            else if (currentPage == pagesCount) {
                $("#firstPage").removeAttr("disabled");
                $("#prevPage").removeAttr("disabled");              
                $("#nextPage").attr("disabled",true);  
                $("#lastPage").attr("disabled",true);  
            }
            else {
                $("#firstPage").removeAttr("disabled");
                $("#prevPage").removeAttr("disabled");              
                $("#nextPage").removeAttr("disabled"); 
                $("#lastPage").removeAttr("disabled");                 
            }       
        }

//****************************************************ACTION FUNCTIONS***************************************************************
        $("#nextPage").click( function(action) {
            var currentPage =  parseInt($("#currentPage").val());
            $("#currentPage").val(currentPage + 1);
            paginationControl(records);

        });

        $("#prevPage").click( function(action) {
            var currentPage =  parseInt($("#currentPage").val());
            $("#currentPage").val(currentPage - 1);
            paginationControl(records);

        });

        $("#firstPage").click( function(action) {
            $("#currentPage").val(1);
            paginationControl(records);
        });

        $("#lastPage").click( function(action) {
            var lastPage = $("#pagesCount").text();
            $("#currentPage").val(lastPage);
            paginationControl(records);
        });

        $("#tableHead").click( function(currentRow) {
            var activeField = currentRow.target || currentRow.srcElement;
            if (activeField.tagName != "TH") {
                return;
            }                    

            if ($(activeField).attr("direction") == "asc") {
                direction = false;
            } 
            else {
                direction = true;
            }

            $(activeField).find( "span").remove();
            runQuery(activeField.textContent.trim(), direction);
        });

        $("#tableBody").click( function(action) {
            $("#Errors").text("");
            currentCell = action.target || action.srcElement;
            if ($(currentCell).attr("edit") == "false") {
                return;
            }
            else if(currentCell.tagName == "INPUT" || currentCell.tagName == "A") {
                return;
            }
            else if($(currentCell).attr("type") == "REFERENCE") {
                return;
            }
            else if ($(currentCell).attr("type") == "PICKLIST" || $(currentCell).attr("type") == "MULTIPICKLIST") {    
                oldValue = currentCell.textContent.replace(/\r|\n/g, "").trim(); 
                var picklist = ($(currentCell).attr("picklist").split(",")); 
                values = {names : picklist};
                PopUpShow();
                selectView = $("#tmpPicklistSelect").html();
                $("#picklist").append(_.template(selectView, values));
                return;
            }
            else if (typeof $(currentCell).attr("type") == "undefined") {
                return;
            }

            oldValue = currentCell.textContent.replace(/\r|\n/g, '').trim();

            $(currentCell).empty();
            object = {
                value: oldValue,
                dataType: $(currentCell).attr("type"),
                edit: $(currentCell).attr("edit")
            };           

            inputView = $("#tmpInput").html();
            $(currentCell).append(_.template(inputView, {object: object}));

            var inputElement = $("#edit");
            if ($(currentCell).attr("type") == "DATE" || $(currentCell).attr("type") == "DATETIME" ) {
                openDatepicker(inputElement);
            }  
            else {
                $(inputElement).focus();
                $(inputElement).blur(function() {                
                    var val = $(this).val();
                    if (val == oldValue) {
                      $(this).parent().empty().html(val);
                      return;                      
                    }
                    $(this).parents("tr").attr("type", "Edited");
                    $(this).parents("td").addClass("cellEdited");

                    $(this).parent().empty().html(val);
                    $("#buttonEditBlock").show();
                });
            }
        });        

        $(window).keydown(function(event) {      
            //pressed enter      
            if(event.keyCode == 13) {   
                $("#edit").blur();
                $("#buttonEditBlock").show();
                $("#edit").parent("tr").attr("class", "Edited");
            }

            //pressed Esc
            if(event.keyCode == 27) {  
                $("#picklist").empty();
                PopUpHide();                
                $('#edit').parent().empty().html(oldValue);
                $('#edit').blur();
            }
        });

    </script>




<!--******************************************************** UNDERSCORE TEMPLATES ***********************************************************-->
    <script type="text/template" id="tmpPicklistSelect">
      <div>
      <% var multiPicklist = ''; %>
      <%  if ($(currentCell).attr('type') == 'MULTIPICKLIST') { multiPicklist = "multiple"; } %>  
      <select id="picklistValues" <%= multiPicklist %> >        
        <% _.each(values.names, function(value, key) { %>
          <option value="<%= value %>"><%= value %></option>
         <% }); %> 
      </select>
      </div>
      <div>
        <button id="getSelect" onclick="selectedPickList();" >SELECT</button>
        <button id="cancelSelect" onclick="cancelSelect();" >CANCEL</button>
      </div>
    </script>    

    <script type="text/template" id="tmpInput">
        <%  disabled = "disabled"; %>
        <%  if (object.edit == 'true') { disabled = '' } %>        
        <input id="edit" type="text" value="<%= object.value %>" <%= disabled %> />
    </script>

    <script type="text/template" id="tmpTableNames">
        <select id="selectTableNames" onchange="getFields(this)">   
            <% _.each(tables, function(table, key, list) { %>
                <option value="<%= table.name %>"><%= table.name %></option>
            <% }); %>
        </select>
    </script>

    <script type="text/template" id="tmpFieldNames">
        <div>
            <select id="selectFieldNames" multiple size="10" >   
                <% _.each(fields, function(field, key, list) { %>
                    <option value="<%= field.name %>"><%= field.name %></option>
                <% }); %>
            </select>
        </div>
        <div>
            <button onclick="runQuery('Id', true);" >Run query</button>
        </div>
    </script>

    <script type="text/tmplate" id="tmpResultTableHead">
        <tr>
            <% _.each(heads, function(head, key, list) { %>
                <%  sortClass = ""; direction = ''  %>
                <%  if (head.isSort) { if(head.direction) { direction = '&#9650;'; sortClass = "asc";  } else {direction = '&#9660;';sortClass = "desc";} } %>
                <th class="text-left" edit="<%= head.isEdit %>" direction="<%= sortClass  %>"><%= head.name %><span><%= direction %></span> </th>
              
            <% }); %>
        </tr>
    </script>

    <script type="text/tmplate" id="tmpResultTableBody">
        <% _.each(recordsView, function(record, key, list) { %>
            <tr> 
                <% _.each(record.object.fieldsList, function(field, key, list) { %>
                    <% if (field.fieldType == 'DATE' && !!field.fieldValue) { %>
                        <td class="text-left" type="<%= field.fieldType %>" edit="<%= field.isEdit %>" > 
                            <%= getDataView(field.fieldValue, true) %>
                        </td> 
                    <% } else if (field.fieldType == 'DATETIME' && !!field.fieldValue) { %>
                        <td class="text-left" type="<%= field.fieldType %>" edit="<%= field.isEdit %>" > 
                            <%= getDataView(field.fieldValue, false) %>
                        </td> 
                    <% } else if (field.fieldType == 'REFERENCE' && !!field.fieldValue) { %>
                        <td class="text-left" type="<%= field.fieldType %>" edit="<%= field.isEdit %>" > 
                            <a target="_blank" href="<%= getReference(field.fieldValue) %>"> <%= field.fieldValue %> </a>
                        </td> 
                    <% } else if (field.fieldType == 'PICKLIST' || field.fieldType == 'MULTIPICKLIST') { %>
                        <td class="text-left" type="<%= field.fieldType %>" edit="<%= field.isEdit %>" picklist="<%= field.picklistValues %>"> 
                            <%= field.fieldValue %>
                        </td> 
                    <% } else { %>
                        <td class="text-left" type="<%= field.fieldType %>" edit="<%= field.isEdit %>" > 
                            <%= field.fieldValue %>
                        </td> 
                    <% } %>
                <% }); %>
            </tr>
        <% }); %>
    </script>

</apex:page>